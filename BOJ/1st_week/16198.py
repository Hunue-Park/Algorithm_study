# N개의 에너지 구슬이 일렬로 놓여져 있고, 에너지 구슬을 이용해서 에너지를 모으려고 한다.

# i번째 에너지 구슬의 무게는 Wi이고, 에너지를 모으는 방법은 다음과 같으며, 반복해서 사용할 수 있다.

# 에너지 구슬 하나를 고른다. 고른 에너지 구슬의 번호를 x라고 한다. 단, 첫 번째와 마지막 에너지 구슬은 고를 수 없다.
# x번째 에너지 구슬을 제거한다.
# Wx-1 × Wx+1의 에너지를 모을 수 있다.
# N을 1 감소시키고, 에너지 구슬을 1번부터 N번까지로 다시 번호를 매긴다. 번호는 첫 구슬이 1번, 다음 구슬이 2번, ... 과 같이 매겨야 한다.
# N과 에너지 구슬의 무게가 주어졌을 때, 모을 수 있는 에너지 양의 최댓값을 구하는 프로그램을 작성하시오.

# 입력
# 첫째 줄에 에너지 구슬의 개수 N(3 ≤ N ≤ 10)이 주어진다.

# 둘째 줄에는 에너지 구슬의 무게 W1, W2, ..., WN을 공백으로 구분해 주어진다. (1 ≤ Wi ≤ 1,000)

# 출력
# 첫째 줄에 모을 수 있는 에너지의 최댓값을 출력한다.

import sys
N = int(sys.stdin.readline())
weights = list(map(int, sys.stdin.readline().split()))

ans = -99999

def dfs(sum_bead):
    #최대값 갱신 글로벌 변수선언
    global ans
    # 구슬을 빼다가 두개만 남았을때 재귀를 종료
    if len(weights) == 2:
        # 재귀를 종료하기 전에 최대값을 갱신하고 종료
        ans = max(ans, sum_bead)
        return
    for i in range(1, len(weights) - 1):
        value = weights[i - 1] * weights[i + 1]
        #밑에서 다시 리스트에 추가하기위한 작업
        origin = weights[i]
        del weights[i]
        # 여기서 실행된 재귀가 최종적으로 종료되면 하나의 합 경우가 완성된다. 
        dfs(sum_bead + value)
        #왜 여기서 뺐던 값을 다시 넣어서 리스트를 초기화해주는가?
        # 시작값을 어떤 것을 넣었냐에 따라 이후의 합의 경우의 수가 달라지기때문
        weights.insert(i, origin)

dfs(0)

print(ans)


